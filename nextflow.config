/*
 * -------------------------------------------------
 *  cleansumstats Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Set todays date, used to create dated files/folders
today = new Date().format("yyyy-MM-dd-HHmm")

// work dir (scratch is emptied after finished run, so can't be combined with intermediate files)
// manually switch to scratch for production version
//workDir = "/scratch/${USER}-${today}-nf-workdir"
//tmpDir = "/scratch/${USER}-${today}-nf-tmpdir"
//workDir = "work"
//tmpDir = "tmp"

// Global default params, used in configs
params {

  //pipeline root
  libdir = '/cleansumstats'

  //input
  extrapaths=""

  //output
  intermediates="${params.outdir}/intermediates"
  rawoutput="${params.outdir}/raw"
  details="${params.outdir}/details"
  pipeline_info="${params.outdir}/pipeline_info"

  // Reference folders
  libdirdbsnp = "${params.libdir}/tests/example_data/dbsnp/generated_reference"
  dbsnp_38 = "${params.libdirdbsnp}/All_20180418_GRCh38.sorted.bed"
  dbsnp_38_37 = "${params.libdirdbsnp}/All_20180418_GRCh38_GRCh37.sorted.bed"
  dbsnp_37_38 = "${params.libdirdbsnp}/All_20180418_GRCh37_GRCh38.sorted.bed"
  dbsnp_36_38 = "${params.libdirdbsnp}/All_20180418_GRCh36_GRCh38.sorted.bed"
  dbsnp_35_38 = "${params.libdirdbsnp}/All_20180418_GRCh35_GRCh38.sorted.bed"
  dbsnp_RSID_38 = "${params.libdirdbsnp}/All_20180418_RSID_GRCh38.sorted.bed"
  libdir1kaf = "${params.libdir}/tests/example_data/1kgp/generated_reference"
  kg1000AFGRCh38 = "${params.libdir1kaf}/1kg_af_ref.sorted.joined"

  checkonly = false
  dev = false

  // Filters
  beforeLiftoverFilter = "duplicated_keys"
  afterLiftoverFilter = "duplicated_chrpos_refalt_in_GRCh38,multiple_rsids_in_dbsnp"
  afterAlleleCorrectionFilter = ""

  //auxiallary functionality
  generateMetafile = false
  generateMetaClass = false
  generateDbSNPreference = false
  generate1KgAfSNPreference = false

  //auxiallary functionality required files
  hg38ToHg19chain = "${params.libdir}/external_data/chain_files/hg38ToHg19.over.chain.gz"
  hg19ToHg18chain = "${params.libdir}/external_data/chain_files/hg19ToHg18.over.chain.gz"
  hg19ToHg17chain = "${params.libdir}/external_data/chain_files/hg19ToHg17.over.chain.gz"

  // Boilerplate options
  name = false
  email = false
  email_on_fail = false
  maxMultiqcEmailFileSize = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  awsqueue = false
  awsregion = 'eu-west-1'
  igenomesIgnore = false
  custom_config_version = 'master'
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'cleansumstats'
  author = 'Jesper R. GÃ¥din'
  homePage = 'https://github.com/BioPsyk/cleansumstats'
  description = 'Convert GWAS sumstat files into a common format with a common reference for positions, rsids, effect alleles, and filling in missing stats.'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
