/*
 * -------------------------------------------------
 *  cleansumstats Nextflow test config file
 * -------------------------------------------------
 * Configuration for running tests with minimal resource usage
 * to prevent resource exhaustion when running multiple tests
 * in parallel in containerized environments.
 */

// Function to ensure that resource requirements don't go beyond
// a maximum limit (copied from main nextflow.config)
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

process {
  // Force all processes to use absolute minimum resources
  cpus = 1
  memory = { check_max( 512.MB * task.attempt, 'memory' ) }
  time = { check_max( 3.min * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Override all process labels to use minimal resources
  withLabel:process_low {
    cpus = 1
    memory = { check_max( 256.MB * task.attempt, 'memory' ) }
    time = { check_max( 2.min * task.attempt, 'time' ) }
  }
  withLabel:process_medium {
    cpus = 1
    memory = { check_max( 512.MB * task.attempt, 'memory' ) }
    time = { check_max( 3.min * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = 1
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.min * task.attempt, 'time' ) }
  }
  withLabel:process_long {
    cpus = 1
    memory = { check_max( 512.MB * task.attempt, 'memory' ) }
    time = { check_max( 8.min * task.attempt, 'time' ) }
  }
  
  // Special configurations for DbSNP reference generation processes
  // These need more resources as they process VCF files and generate reference databases
  withName:dbsnp_all_pos {
    cpus = 1
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.min * task.attempt, 'time' ) }
  }
  withName:liftover {
    cpus = 1
    memory = { check_max( 3.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.min * task.attempt, 'time' ) }
  }
  withName:dbsnp_liftover_input_prep {
    cpus = 1
    memory = { check_max( 1.5.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.min * task.attempt, 'time' ) }
  }
  withName:dbsnp_liftover_output_clean {
    cpus = 1
    memory = { check_max( 1.5.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.min * task.attempt, 'time' ) }
  }
  withName:vcf_to_bed {
    cpus = 1
    memory = { check_max( 1.5.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.min * task.attempt, 'time' ) }
  }
  withName:sort_bed {
    cpus = 1
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.min * task.attempt, 'time' ) }
  }
  
  withName:get_software_versions {
    cache = false
  }
}

params {
  // Increased limits to accommodate DbSNP reference generation
  max_memory = 6.GB
  max_cpus = 2
  max_time = 15.min
}

// Minimal JVM settings to prevent thread exhaustion
env {
  NXF_OPTS = '-Xms256m -Xmx2g -XX:ActiveProcessorCount=1 -XX:ParallelGCThreads=1 -XX:ConcGCThreads=1 -XX:+UseSerialGC -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -XX:+UnlockExperimentalVMOptions -XX:MaxDirectMemorySize=512m'
  JAVA_OPTS = '-Xms256m -Xmx2g -XX:ActiveProcessorCount=1 -XX:ParallelGCThreads=1 -XX:ConcGCThreads=1 -XX:+UseSerialGC -Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -XX:+UnlockExperimentalVMOptions -XX:MaxDirectMemorySize=512m'
  JAVA_TOOL_OPTIONS = '-XX:ActiveProcessorCount=1 -Djava.util.concurrent.ForkJoinPool.common.parallelism=1'
  NXF_EXECUTOR_LOCAL_CPUS = '1'
  // System-level thread limits
  OMP_NUM_THREADS = '1'
  MKL_NUM_THREADS = '1'
  OPENBLAS_NUM_THREADS = '1'
  VECLIB_MAXIMUM_THREADS = '1'
  NUMEXPR_NUM_THREADS = '1'
} 